{"name":"Es6-fuzz","tagline":"fuzzylogic with focus on usability for javascript es6","body":"# fuzzylogic for es6\r\n<p align=\"center\">\r\n  <a href=\"https://travis-ci.org/sebs/es6-fuzz\">\r\n    <img src=\"http://img.shields.io/travis/sebs/es6-fuzz.svg\"\r\n         alt=\"build status\">\r\n  </a>\r\n  <a href=\"https://npmjs.org/package/es6-fuzz\">\r\n    <img src=\"https://img.shields.io/npm/v/es6-fuzz.svg\"\r\n         alt=\"npm version\">\r\n  </a>\r\n\r\n  <a href=\"https://bower.org/package/es6-fuzz\">\r\n    <img src=\"https://img.shields.io/bower/v/es6-fuzz.svg\"\r\n         alt=\"npm version\">\r\n  </a>\r\n  <a href=\"https://github.com/sebs/es6-fuzz/blob/master/LICENSE.md\">\r\n    <img src=\"https://img.shields.io/npm/l/s6-fuzz.svg\"\r\n         alt=\"license\">\r\n  </a>\r\n</p>\r\n\r\n## Install and Usage\r\n\r\nes6-fuzz is available as a NPM package.\r\n\r\n```\r\nnpm install es6-fuzz\r\n```\r\n\r\nbower\r\n\r\nOtherwise you can use bower for the browser use case. There is a browser ready export at [/dist](/dist)\r\n\r\n```\r\nbower install es6-fuzz\r\n```\r\n\r\n## Example\r\n\r\n```javascript\r\nvar logic = new Logic();\r\nvar res = logic\r\n  .init('noAttack', new Triangle(0, 20, 40))\r\n  .and('normalAttack', new Trapezoid(20, 30, 90, 100))\r\n  .and('enragedAttack', new Grade(90, 100))\r\n  .defuzzify(99);\r\n```\r\n\r\n## Example 2\r\n\r\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/Fuzzy_logic_temperature_en.svg/300px-Fuzzy_logic_temperature_en.svg.png\" />\r\n\r\n\r\n\r\n```javascript\r\nvar logic = new Logic();\r\nvar res = logic\r\n  .init('verycold', new Triangle(new Trapezoid(0, 0, 8, 12))  // until 10 degrees very cold\r\n  .and('cold', new Trapezoid(8, 12, 18, 20)) // until 12-18 around warm\r\n  .and('hot', new Trapezoid(12, 20, 30, 100)) // all up from 30 surely  hot\r\n  .defuzzify(99);\r\n\r\n  console.log(res);\r\n  { fuzzified: 0.9000000000000004,\r\n  defuzzified: 'enragedAttack',\r\n  rules:\r\n   [ { output: 'noAttack', shape: {}, type: 'init', fuzzy: 0 },\r\n     { output: 'normalAttack',\r\n       shape: {},\r\n       type: 'and',\r\n       fuzzy: 0.09999999999999964 },\r\n     { output: 'enragedAttack',\r\n       shape: {},\r\n       type: 'and',\r\n       fuzzy: 0.9000000000000004 } ],\r\n  toString: [Function] }\r\n```\r\n\r\n## development\r\n\r\n**Tests** use mocha and a plugin for traceur\r\n\r\n```\r\nnpm test\r\n```\r\n\r\nthe commando resolves to\r\n\r\n```\r\n./node_modules/mocha/bin/mocha --compilers js:mocha-traceur\r\n```\r\n\r\nYou **transpile to es5** with es6ify.js. The commando builds a *latest and a version number based file in dist. This is your oldschool es5 coode if you want it. Its more the browser use case.\r\n\r\n```\r\nnode es6ify\r\n```\r\n\r\nYou might want to do a **checkstyle** and use jscs, which seems to be fine with es6 :)\r\n\r\n```\r\nnpm run jscs\r\n```\r\n\r\n* docs: npm run docs, npm run docs:site\r\n\r\n# Stuff\r\n* http://de.slideshare.net/BCSLeicester/fuzzy-logic-in-the-real-world-2326817\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}